{"version":3,"sources":["NavBar/NavBar.tsx","About/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","toolbar","mixins","drawerPaper","content","flexGrow","padding","spacing","NavBar","classes","useTheme","useState","isMobile","setMobile","handleDrawerToggle","Box","ml","mt","IconButton","onClick","color","CloseSharp","className","Divider","List","map","text","index","ListItem","button","key","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","height","Slide","direction","timeout","in","Hidden","initialWidth","smUp","pl","Drawer","variant","anchor","open","onClose","paper","ModalProps","keepMounted","elevation","xsDown","pr","Button","component","Link","to","About","props","Fade","style","transitionDelay","Typography","paragraph","href","App","exact","path","window","location","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e190c2be.chunk.js","sourcesContent":["import {\r\n    AppBar,\r\n    Box,\r\n    Button,\r\n    CssBaseline,\r\n    Drawer,\r\n    Hidden,\r\n    IconButton,\r\n    List,\r\n    ListItemText,\r\n    Slide\r\n} from \"@material-ui/core\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport './NavBar.scss';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport useTheme from \"@material-ui/core/styles/useTheme\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {CloseSharp} from \"@material-ui/icons\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n            marginLeft: drawerWidth,\r\n        },\r\n    },\r\n    // necessary for content to be below app bar\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function NavBar() {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [isMobile, setMobile] = useState(false);\r\n\r\n    const handleDrawerToggle = () => {\r\n        setMobile(!isMobile);\r\n    }\r\n    const drawer = (\r\n            <div>\r\n                <Box ml=\"77%\" mt=\"2%\">\r\n                <IconButton\r\n                    onClick={handleDrawerToggle}\r\n                    color=\"inherit\"\r\n                >\r\n                    <CloseSharp/>\r\n                </IconButton>\r\n                <div className={classes.toolbar}/>\r\n                <Divider/>\r\n                </Box>\r\n                <List>\r\n                    {['About Me', 'LinkedIn', 'Projects', 'Contact', 'Resume'].map((text, index) => (\r\n                        <ListItem button key={text}>\r\n                            <ListItemText primary={text}/>\r\n                        </ListItem>\r\n                    ))}\r\n                </List>\r\n            </div>\r\n    )\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Box height=\"auto\">\r\n                        <Slide direction=\"down\" timeout={1000} in={true}>\r\n                            <h2 className=\"h2-blinker\">\r\n                                \\Hans>\r\n                                <span className=\"span-blinker\">_</span>\r\n                            </h2>\r\n                        </Slide>\r\n                    </Box>\r\n                    <Hidden initialWidth='xs' smUp>\r\n                        <Box pl=\"65%\">\r\n                            <IconButton\r\n                                onClick={handleDrawerToggle}\r\n                                color=\"inherit\"\r\n                            >\r\n                                <MenuIcon/>\r\n                            </IconButton>\r\n                        </Box>\r\n                        <Drawer\r\n                            variant=\"temporary\"\r\n                            anchor='right'\r\n                            open={isMobile}\r\n                            onClose={handleDrawerToggle}\r\n                            classes={{\r\n                                paper: classes.drawerPaper,\r\n                            }}\r\n                            ModalProps={{\r\n                                keepMounted: true, // Better open performance on mobile.\r\n                            }}\r\n                            elevation={2}\r\n                        >\r\n                            {drawer}\r\n                        </Drawer>\r\n                    </Hidden>\r\n                    <Hidden xsDown>\r\n                        <Slide direction=\"down\" timeout={1200} in={true}>\r\n                            <Box pl=\"5%\" pr=\"2%\">\r\n                                <Button component={Link} to=\"/about\" color=\"inherit\"> About Me </Button>\r\n                            </Box>\r\n                        </Slide>\r\n                        <Slide direction=\"down\" timeout={1350} in={true}>\r\n                            <Box pr=\"2%\">\r\n                                <Button component={Link} to=\"/linkedin\" color=\"inherit\"> LinkedIn </Button>\r\n                            </Box>\r\n                        </Slide>\r\n                        <Slide direction=\"down\" timeout={1500} in={true}>\r\n                            <Box pr=\"2%\">\r\n                                <Button component={Link} to=\"/projects\" color=\"inherit\"> Projects </Button>\r\n                            </Box>\r\n                        </Slide>\r\n                        <Slide direction=\"down\" timeout={1650} in={true}>\r\n                            <Box pr=\"2%\">\r\n                                <Button component={Link} to=\"/contact\" color=\"inherit\"> Contact </Button>\r\n                            </Box>\r\n                        </Slide>\r\n                        <Slide direction=\"down\" timeout={1800} in={true}>\r\n                            <Box pr=\"2%\">\r\n                                <Button component={Link} to=\"/resume\" color=\"inherit\"> Résumé </Button>\r\n                            </Box>\r\n                        </Slide>\r\n                    </Hidden>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './About.scss';\r\nimport {Fade, Typography} from \"@material-ui/core\";\r\n\r\n\r\nconst About: React.FC = (props) => {\r\n    return (\r\n        <Fade in={true} timeout={1400} style={{transitionDelay: '1300ms'}}>\r\n            <div className=\"about-container\">\r\n                <h1>Hi, I'm Hans.</h1>\r\n                <Typography paragraph>I am a Software Engineer based in Los Angeles, CA.\r\n                    I graduated from the <a href=\"https://ucsd.edu/\">University of California, San Diego</a> with a\r\n                    Bachelors in Computer Science.\r\n                    My skills are focused in web development using React, TypeScript, and Java Spring Boot.\r\n                </Typography>\r\n            </div>\r\n        </Fade>\r\n    );\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\r\nimport './App.css';\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport About from \"./About/About\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <div className=\"App\">\r\n                    <NavBar/>\r\n                    <Route exact path=\"/\">\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Redirect to=\"/about\" />\r\n                    </Route>\r\n                    <Route exact path=\"/about\">\r\n                        <About />\r\n                    </Route>\r\n                    <Route path='/linkedin' component={() => {\r\n                        window.location.href = 'https://www.linkedin.com/in/hans-gamboa-073808155/';\r\n                        return null;\r\n                    }}/>\r\n                    <Route path='/projects' component={() => {\r\n                        window.location.href = 'https://github.com/HansGam';\r\n                        return null;\r\n                    }}/>\r\n                    <Route path='/contact' component={() => {\r\n                        window.location.href = 'mailto:hdgamboa@gmail.com';\r\n                        return null;\r\n                    }}/>\r\n                </div>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}