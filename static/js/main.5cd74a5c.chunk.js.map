{"version":3,"sources":["NavBar/NavBar.tsx","About/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","AppBar","position","Toolbar","Box","height","Slide","direction","timeout","in","className","pl","pr","Button","component","Link","to","color","About","props","Fade","style","transitionDelay","href","App","exact","path","window","location","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAMe,SAASA,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,OAAO,QACR,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,QAAS,IAAMC,IAAI,GACvC,wBAAIC,UAAU,cAAd,UAEI,0BAAMA,UAAU,gBAAhB,QAIZ,kBAACJ,EAAA,EAAD,CAAOC,UAAU,OAAOC,QAAS,KAAMC,IAAI,GACvC,kBAACL,EAAA,EAAD,CAAKO,GAAG,KAAKC,GAAG,MACZ,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,SAASC,MAAM,WAA3C,gBAGR,kBAACX,EAAA,EAAD,CAAOC,UAAU,OAAOC,QAAS,KAAMC,IAAI,GACvC,kBAACL,EAAA,EAAD,CAAKQ,GAAG,MACJ,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,YAAYC,MAAM,WAA9C,gBAGR,kBAACX,EAAA,EAAD,CAAOC,UAAU,OAAOC,QAAS,KAAMC,IAAI,GACvC,kBAACL,EAAA,EAAD,CAAKQ,GAAG,MACJ,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,YAAYC,MAAM,WAA9C,gBAGR,kBAACX,EAAA,EAAD,CAAOC,UAAU,OAAOC,QAAS,KAAMC,IAAI,GACvC,kBAACL,EAAA,EAAD,CAAKQ,GAAG,MACJ,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,WAAWC,MAAM,WAA7C,eAGR,kBAACX,EAAA,EAAD,CAAOC,UAAU,OAAOC,QAAS,KAAMC,IAAI,GACvC,kBAACL,EAAA,EAAD,CAAKQ,GAAG,MACJ,kBAACC,EAAA,EAAD,CAAQC,UAAWC,IAAMC,GAAG,UAAUC,MAAM,WAA5C,sB,kBCpBTC,EAfS,SAACC,GACrB,OACI,kBAACC,EAAA,EAAD,CAAMX,IAAI,EAAMD,QAAS,KAAMa,MAAO,CAACC,gBAAiB,WACpD,yBAAKZ,UAAU,mBACX,8CACA,sGACyB,uBAAGa,KAAK,qBAAR,uCADzB,qIC4BDC,MAhCf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,yBAAKd,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,MAElB,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KACd,kBAAC,IAAD,CAAUV,GAAG,YAEjB,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,UACd,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YAAYZ,UAAW,WAE/B,OADAa,OAAOC,SAASL,KAAO,qDAChB,QAEX,kBAAC,IAAD,CAAOG,KAAK,YAAYZ,UAAW,WAE/B,OADAa,OAAOC,SAASL,KAAO,6BAChB,QAEX,kBAAC,IAAD,CAAOG,KAAK,WAAWZ,UAAW,WAE9B,OADAa,OAAOC,SAASL,KAAO,4BAChB,YClBXM,QACW,cAA7BF,OAAOC,SAASE,UAEe,UAA7BH,OAAOC,SAASE,UAEhBH,OAAOC,SAASE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cd74a5c.chunk.js","sourcesContent":["import {AppBar, Box, Button, Slide} from \"@material-ui/core\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport './NavBar.scss';\n\nexport default function NavBar() {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Box height=\"auto\">\n                    <Slide direction=\"down\" timeout={1000} in={true}>\n                        <h2 className=\"h2-blinker\">\n                            \\Hans>\n                            <span className=\"span-blinker\">_</span>\n                        </h2>\n                    </Slide>\n                </Box>\n                <Slide direction=\"down\" timeout={1200} in={true} >\n                    <Box pl=\"5%\" pr=\"2%\">\n                        <Button component={Link} to=\"/about\" color=\"inherit\"> About Me </Button>\n                    </Box>\n                </Slide>\n                <Slide direction=\"down\" timeout={1350} in={true}>\n                    <Box pr=\"2%\">\n                        <Button component={Link} to=\"/linkedin\" color=\"inherit\"> LinkedIn </Button>\n                    </Box>\n                </Slide>\n                <Slide direction=\"down\" timeout={1500} in={true}>\n                    <Box pr=\"2%\">\n                        <Button component={Link} to=\"/projects\" color=\"inherit\"> Projects </Button>\n                    </Box>\n                </Slide>\n                <Slide direction=\"down\" timeout={1650} in={true}>\n                    <Box pr=\"2%\">\n                        <Button component={Link} to=\"/contact\" color=\"inherit\"> Contact </Button>\n                    </Box>\n                </Slide>\n                <Slide direction=\"down\" timeout={1800} in={true}>\n                    <Box pr=\"2%\">\n                        <Button component={Link} to=\"/resume\" color=\"inherit\"> Résumé </Button>\n                    </Box>\n                </Slide>\n            </Toolbar>\n        </AppBar>\n    );\n}","import React from 'react';\nimport './About.scss';\nimport {Fade} from \"@material-ui/core\";\n\n\nconst About: React.FC = (props) => {\n    return (\n        <Fade in={true} timeout={1400} style={{transitionDelay: '1300ms'}}>\n            <div className=\"about-container\">\n                <h1>Hey, I'm Hans.</h1>\n                <p>I am a Software Engineer based in Los Angeles, CA.\n                    I graduated from the <a href=\"https://ucsd.edu/\">University of California, San Diego</a> with a\n                    Bachelors in Computer Science.\n                    My skills are focused in web development using React, TypeScript, and Java Spring Boot.\n                </p>\n            </div>\n        </Fade>\n    );\n}\n\nexport default About\n","import React from 'react';\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\nimport NavBar from \"./NavBar/NavBar\";\nimport About from \"./About/About\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <div className=\"App\">\n                    <NavBar/>\n                    <Route exact path=\"/\">\n                    </Route>\n                    <Route exact path=\"/\">\n                        <Redirect to=\"/about\" />\n                    </Route>\n                    <Route exact path=\"/about\">\n                        <About />\n                    </Route>\n                    <Route path='/linkedin' component={() => {\n                        window.location.href = 'https://www.linkedin.com/in/hans-gamboa-073808155/';\n                        return null;\n                    }}/>\n                    <Route path='/projects' component={() => {\n                        window.location.href = 'https://github.com/HansGam';\n                        return null;\n                    }}/>\n                    <Route path='/contact' component={() => {\n                        window.location.href = 'mailto:hdgamboa@gmail.com';\n                        return null;\n                    }}/>\n                </div>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}